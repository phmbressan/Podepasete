// Fibonacci sequence generator program for the PDP7

// Program start
00000 750000 // CLA - clear AC
00001 750000 // CLA - clear AC - nop
00002 200000 // LAC 0 - AC<-N
00003 741200 // SNA - skip if AC != 0
00004 600100 // JMP END - if AC==0, end the program (jump to END)
00005 200001 // LAC 1 - AC<-FIB1 (0)
00006 040020 // DAC 20 - SEQ<-FIB1
00007 200002 // LAC 2 - AC<-FIB2
00010 040021 // DAC 21 - SEQ+1<-FIB2
00011 200000 // LAC 0 - AC<-N
00012 340007 // TAD 7 - AC<-N-2
00013 040004 // DAC 4 - COUNT<-N-2

// Fibonacci loop
00014 200004 // LAC 4 - AC<-COUNT
00015 741200 // SNA - skip if COUNT != 0
00016 600100 // JMP END - if COUNT==0, end the program
00017 600031 // JMP FIB_CALC - jump to subroutine FIB_CALC
00020 200004 // LAC 4 - AC<-COUNT
00021 340010 // TAD 10 - AC<-COUNT-1
00022 040004 // DAC 4 - COUNT<-COUNT-1
00023 600014 // JMP LOOP - repeat loop

// FIB_CALC - subroutine to calculate the next Fibonacci
00031 200002 // LAC 2 - AC<-FIB2
00032 040003 // DAC 3 - TEMP<-FIB2
00033 340001 // TAD 1 - AC<-AC+FIB1
00034 040005 // DAC 5 - NEXT<-FIB2+FIB1
00035 200003 // LAC 3 - AC<-TEMP
00036 040001 // DAC 1 - FIB1<-TEMP
00037 200005 // LAC 5 - AC<-NEXT
00040 040002 // DAC 2 - FIB2<-NEXT
00041 060006 // DAC I 6 - [SEQ_LOC]<-NEXT
00042 440006 // ISZ 6 - SEQ_LOC<-SEQ_LOC+1
00043 200005 // LAC 5 - AC<-NEXT
00044 700406 // TLS - print the number
00045 600020 // JMP 20 - return from subroutine
00100 740040 // HLT - halt